version: '3.9'
services:
  postgres-order:
    container_name: postgres-order
    image: postgres:14.9-alpine
    environment:
      POSTGRES_DB: order_service
      POSTGRES_PASSWORD: secret
      POSTGRES_USER: postgres
    ports:
      - "5433:5432"
    expose:
      - "5433"
    volumes:
      - postgres-order-data:/var/lib/postgresql/data
    networks:
      - internal-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  postgres-payment:
    container_name: postgres-payment
    image: postgres:14.9-alpine
    environment:
      POSTGRES_DB: payment_service
      POSTGRES_PASSWORD: secret
      POSTGRES_USER: postgres
    ports:
      - "5435:5432"
    expose:
      - "5435"
    volumes:
      - postgres-payment-data:/var/lib/postgresql/data
    networks:
      - internal-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  postgres-user:
    container_name: postgres-user
    image: postgres:14.9-alpine
    environment:
      POSTGRES_DB: user_service
      POSTGRES_PASSWORD: secret
      POSTGRES_USER: postgres
    ports:
      - "5436:5432"
    expose:
      - "5436"
    volumes:
      - postgres-user-data:/var/lib/postgresql/data
    networks:
      - internal-network
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 10

  postgres-product:
    container_name: postgres-product
    image: postgres:14.9-alpine
    environment:
      POSTGRES_DB: product_service
      POSTGRES_PASSWORD: secret
      POSTGRES_USER: postgres
    ports:
      - "5432:5432"
    expose:
      - "5432"
    volumes:
      - postgres-product-data:/var/lib/postgresql/data
    networks:
      - internal-network
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 10

  postgres-inventory:
    container_name: postgres-inventory
    image: postgres:14.9-alpine
    environment:
      POSTGRES_DB: inventory_service
      POSTGRES_PASSWORD: secret
      POSTGRES_USER: postgres
    ports:
      - "5434:5432"
    volumes:
      - postgres-inventory-data:/var/lib/postgresql/data
    networks:
      - internal-network
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 10

  order-service:
    container_name: order-service
    build:
      context: ../order-service
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8082:8082"
    expose:
      - "8082"
    networks:
      - internal-network
    depends_on:
      postgres-order:
        condition: service_healthy
      discovery-server:
        condition: service_started
      api-gateway:
        condition: service_started
      kafka:
        condition: service_started
      activemq:
        condition: service_started
      zipkin:
        condition: service_started
      keycloak:
        condition: service_healthy
      redis:
        condition: service_healthy

  payment-service:
    container_name: payment-service
    build:
      context: ../payment-service
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8085:8085"
    expose:
      - "8085"
    networks:
      - internal-network
    depends_on:
      postgres-payment:
        condition: service_healthy
      discovery-server:
        condition: service_started
      api-gateway:
        condition: service_started
      kafka:
        condition: service_started
      activemq:
        condition: service_started
      zipkin:
        condition: service_started
      keycloak:
        condition: service_healthy
      redis:
        condition: service_healthy

  user-service:
    container_name: user-service
    build:
      context: ../user-service
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8086:8086"
    expose:
      - "8086"
    networks:
      - internal-network
    depends_on:
      postgres-user:
        condition: service_healthy
      discovery-server:
        condition: service_started
      api-gateway:
        condition: service_started
      kafka:
        condition: service_started
      activemq:
        condition: service_started
      zipkin:
        condition: service_started
      keycloak:
        condition: service_healthy
      redis:
        condition: service_healthy

  product-service:
    container_name: product-service
    build:
      context: ../product-service
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8081:8081"
    expose:
      - "8081"
    networks:
      - internal-network
    depends_on:
      postgres-product:
        condition: service_healthy
      discovery-server:
        condition: service_started
      api-gateway:
        condition: service_started
      kafka:
        condition: service_started
      activemq:
        condition: service_started
      zipkin:
        condition: service_started
      keycloak:
        condition: service_healthy
      redis:
        condition: service_healthy

  inventory-service:
    container_name: inventory-service
    build:
      context: ../inventory-service
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8083:8083"
    expose:
      - "8083"
    networks:
      - internal-network
    depends_on:
      postgres-inventory:
        condition: service_healthy
      discovery-server:
        condition: service_started
      api-gateway:
        condition: service_started
      kafka:
        condition: service_started
      activemq:
        condition: service_started
      zipkin:
        condition: service_started
      keycloak:
        condition: service_healthy
      redis:
        condition: service_healthy

  notification-service:
    container_name: notification-service
    build:
      context: ../notification-service
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8084:8084"
    expose:
      - "8084"
    networks:
      - internal-network
    depends_on:
      discovery-server:
        condition: service_started
      api-gateway:
        condition: service_started
      kafka:
        condition: service_started
      activemq:
        condition: service_started
      zipkin:
        condition: service_started
      keycloak:
        condition: service_healthy
      redis:
        condition: service_healthy

  discovery-server:
    container_name: discovery-server
    build:
      context: ../discovery-server
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8761:8761"
    networks:
      - internal-network
    expose:
      - "8761"
    depends_on:
      zipkin:
        condition: service_started

  api-gateway:
    container_name: api-gateway
    build:
      context: ../api-gateway
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8181:8181"
    expose:
      - "8181"
    networks:
      - internal-network
    depends_on:
      discovery-server:
        condition: service_started
      zipkin:
        condition: service_started
      keycloak:
        condition: service_healthy

  zipkin:
    image: openzipkin/zipkin:2.24.3
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - internal-network

  postgres-keycloak:
    container_name: postgres-keycloak
    image: postgres:14.9-alpine
    environment:
      POSTGRES_DB: keycloak_service
      POSTGRES_PASSWORD: secret
      POSTGRES_USER: postgres
    ports:
      - "5439:5432"
    volumes:
      - postgres-keycloak-data:/var/lib/postgresql/data
    networks:
      - internal-network
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 10

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:23.0.3
    command:
      - "start-dev"
      - "--features=preview"
      - "--import-realm"
#      - "--features=token-exchange,declarative-user-profile"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-keycloak:5432/keycloak_service
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: secret
      KC_DEBUG: true
      KC_DEBUG_PORT: "*:8787"
      KC_HTTP_PORT: 8090
      KC_HEALTH_ENABLED: true
      TZ: UTC
    ports:
      - "8090:8090"
      - "8787:8787"
    networks:
      - internal-network
    depends_on:
      postgres-keycloak:
        condition: service_healthy
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    healthcheck:
      test: ['CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8090/health/live']
      interval: 5s
      timeout: 5s
      retries: 10

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - internal-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      - "9092:9092"
    networks:
      - internal-network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_started

  activemq:
    image: symptoma/activemq:5.15.13
    container_name: activemq
    ports:
      - "8161:8161" # Web Console
      - "61616:61616" # OpenWire
      - "5672:5672" # AMQP
      - "61613:61613" # STOMP
      - "1883:1883"   # MQTT
    networks:
      - internal-network
    environment:
      ACTIVEMQ_USERNAME: system
      ACTIVEMQ_PASSWORD: manager
      ACTIVEMQ_WEBADMIN_USERNAME: admin
      ACTIVEMQ_WEBADMIN_PASSWORD: admin
    volumes:
      - activemq-data:/data/activemq
      - activemq-log:/var/log/activemq

  redis:
    image: redis:7.2-alpine
    container_name: redis
    restart: always
    command:
      - "redis-server"
      - "--save 20 1"
      - "--loglevel warning"
    ports:
      - "6379:6379"
    networks:
      - internal-network
    volumes:
      - cache:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 5s
      timeout: 5s
      retries: 10

networks:
  internal-network:

volumes:
  postgres-product-data:
  postgres-order-data:
  postgres-payment-data:
  postgres-user-data:
  postgres-inventory-data:
  postgres-keycloak-data:
  activemq-data:
  activemq-log:
  cache: